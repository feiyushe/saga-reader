{
  "data": {
    "code_dossier": {
      "name": "types.rs",
      "file_path": "crates/llm/src/providers/types.rs",
      "code_purpose": "model",
      "importance_score": 0.6,
      "description": "定义LLM服务所需的核心数据类型和接口契约，包括AI参数配置和Completion服务抽象。",
      "functions": [],
      "interfaces": [
        "CompletionService"
      ]
    },
    "detailed_description": "该组件定义了两个核心结构：AITargetOption 和 CompletionService。AITargetOption 是一个可序列化的配置结构体，用于封装调用大型语言模型（LLM）时的生成参数，如 temperature、seed、top_k、top_p 和 num_ctx，并为这些参数提供了合理的默认值。CompletionService 是一个异步 trait，抽象了 LLM 的 completion 能力，要求实现者提供一个异步方法 `completion`，接收字符串输入并返回 `anyhow::Result<String>` 类型的结果，支持异步非阻塞调用。整体上，此文件作为 LLM 模块的数据建模与接口规范层，为上层调用者和底层实现者提供统一契约。",
    "responsibilities": [
      "定义LLM生成请求的参数配置模型",
      "为AI生成服务提供统一的异步接口契约",
      "确保配置项具备合理默认值以降低使用成本",
      "支持序列化以便于网络传输或持久化"
    ],
    "interfaces": [
      {
        "name": "CompletionService",
        "interface_type": "trait",
        "visibility": "pub",
        "parameters": [
          {
            "name": "message",
            "param_type": "String",
            "is_optional": false,
            "description": "用户输入的prompt文本"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<String>>",
        "description": "LLM Generate服务代理，用于调用Completion能力"
      }
    ],
    "dependencies": [
      {
        "name": "serde",
        "path": null,
        "is_external": true,
        "line_number": 1,
        "dependency_type": "use",
        "version": null
      }
    ],
    "complexity_metrics": {
      "cyclomatic_complexity": 2.0,
      "lines_of_code": 28,
      "number_of_functions": 1,
      "number_of_classes": 0,
      "depth_of_inheritance": 0,
      "coupling_factor": 0.25,
      "cohesion_score": 0.9
    }
  },
  "timestamp": 1758805842,
  "prompt_hash": "58b773ecbd9fd26592f36347631a3c29",
  "token_usage": {
    "input_tokens": 609,
    "output_tokens": 656,
    "total_tokens": 1265
  },
  "model_name": null
}