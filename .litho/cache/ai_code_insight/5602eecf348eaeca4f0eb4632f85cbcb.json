{
  "data": {
    "code_dossier": {
      "name": "api.rs",
      "file_path": "crates/feed_api_rs/src/features/api.rs",
      "code_purpose": "api",
      "importance_score": 0.8,
      "description": "功能模块的门面API定义，提供统一接口供外部调用者访问核心功能。",
      "functions": [],
      "interfaces": [
        "FeaturesAPI"
      ]
    },
    "detailed_description": "该组件定义了名为FeaturesAPI的trait，作为系统功能模块的门面接口。它封装了订阅管理（添加、删除、重命名订阅包和订阅）、内容更新与读取、文章状态标记、应用配置管理、Ollama程序生命周期控制、外部文章打开、基于AI的文章交互以及关键词搜索等核心功能。所有方法均采用异步设计，返回impl Future，符合现代Rust异步编程范式。接口通过引用传递参数，保证效率，并广泛使用anyhow::Result进行错误处理，提升了API的健壮性和可维护性。",
    "responsibilities": [
      "提供统一的功能访问接口（门面模式）",
      "管理用户订阅内容（增删改查）",
      "协调内容更新与数据存储",
      "支持AI辅助阅读功能",
      "管理系统配置与第三方服务集成"
    ],
    "interfaces": [
      {
        "name": "FeaturesAPI",
        "interface_type": "trait",
        "visibility": "pub",
        "parameters": [],
        "return_type": null,
        "description": "功能模块的门面API定义，集中暴露系统核心功能。"
      },
      {
        "name": "add_feeds_package",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "feeds_package",
            "param_type": "FeedsPackage",
            "is_optional": false,
            "description": "要添加的订阅包对象"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "用于添加订阅包，会同步到用户配置存储模块。如果订阅包已经存在，函数将返回一个错误。"
      },
      {
        "name": "remove_feeds_package",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "要删除的订阅包ID"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "用于删除订阅包，会同步到用户配置存储模块。如果订阅包不存在，函数将返回一个错误。"
      },
      {
        "name": "rename_feeds_package",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "要重命名的订阅包ID"
          },
          {
            "name": "new_name",
            "param_type": "&str",
            "is_optional": false,
            "description": "新的订阅包名称"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "用于重命名订阅包，会同步到用户配置存储模块。如果订阅包不存在，函数将返回一个错误。"
      },
      {
        "name": "add_feed",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "目标订阅包ID"
          },
          {
            "name": "ftd",
            "param_type": "FeedTargetDescription",
            "is_optional": false,
            "description": "要添加的订阅描述"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "用于添加订阅到订阅包，会同步到用户配置存储模块。如果订阅已经存在，函数将返回一个错误。"
      },
      {
        "name": "remove_feed",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "所属订阅包ID"
          },
          {
            "name": "feed_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "要移除的订阅ID"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "用于移除订阅包中的订阅，会同步到用户配置存储模块。如果订阅不存在，函数将返回一个错误。"
      },
      {
        "name": "rename_feed",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "所属订阅包ID"
          },
          {
            "name": "feed_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "要重命名的订阅ID"
          },
          {
            "name": "new_name",
            "param_type": "&str",
            "is_optional": false,
            "description": "新的订阅名称"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "用于重命名订阅包中的订阅，会同步到用户配置存储模块。如果订阅不存在，函数将返回一个错误。"
      },
      {
        "name": "change_feed_data",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "所属订阅包ID"
          },
          {
            "name": "feed_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "要修改的订阅ID"
          },
          {
            "name": "data",
            "param_type": "Vec<String>",
            "is_optional": false,
            "description": "新的数据源列表"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "用于修改订阅的数据源。"
      },
      {
        "name": "get_feeds_packages",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [],
        "return_type": "impl std::future::Future<Output = Vec<FeedsPackage>>",
        "description": "获得所有的订阅包信息。"
      },
      {
        "name": "get_feeds_by_package",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "要查询的订阅包ID"
          }
        ],
        "return_type": "impl std::future::Future<Output = Option<FeedsPackage>>",
        "description": "获得指定订阅包中的订阅信息。"
      },
      {
        "name": "update_feed_contents",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "package_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "订阅包ID"
          },
          {
            "name": "feed_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "订阅ID"
          },
          {
            "name": "app_handle",
            "param_type": "Option<AppHandle<R>>",
            "is_optional": true,
            "description": "可选的应用句柄用于UI通知"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "更新订阅内容，将爬取数据源并做内容提取和总结、同步到数据存储模块。"
      },
      {
        "name": "read_feed_contents",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "feed_id",
            "param_type": "&str",
            "is_optional": false,
            "description": "订阅ID"
          },
          {
            "name": "offset",
            "param_type": "u64",
            "is_optional": false,
            "description": "分页偏移量"
          },
          {
            "name": "count",
            "param_type": "u64",
            "is_optional": false,
            "description": "每页数量"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<Vec<Model>>>",
        "description": "读取订阅内容列表。"
      },
      {
        "name": "query_by_id",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "id",
            "param_type": "i32",
            "is_optional": false,
            "description": "文章记录ID"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<Option<Model>>>",
        "description": "根据ID查询单个文章记录。"
      },
      {
        "name": "mark_as_read",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "id",
            "param_type": "i32",
            "is_optional": false,
            "description": "文章记录ID"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "将指定文章标记为已读。"
      },
      {
        "name": "set_favorite",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "id",
            "param_type": "i32",
            "is_optional": false,
            "description": "文章记录ID"
          },
          {
            "name": "is_favorite",
            "param_type": "bool",
            "is_optional": false,
            "description": "是否收藏"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "设置文章收藏状态。"
      },
      {
        "name": "get_app_config",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [],
        "return_type": "impl std::future::Future<Output = anyhow::Result<AppConfig>>",
        "description": "读取AppConfig。"
      },
      {
        "name": "set_app_config",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "app_config",
            "param_type": "AppConfig",
            "is_optional": false,
            "description": "新的应用配置"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "覆盖存储AppConfig。"
      },
      {
        "name": "get_ollama_status",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [],
        "return_type": "impl std::future::Future<Output = anyhow::Result<ProgramStatus>>",
        "description": "获取Ollama程序运行状态。"
      },
      {
        "name": "download_ollama",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "下载Ollama程序。"
      },
      {
        "name": "launch_ollama",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "启动Ollama程序。"
      },
      {
        "name": "open_article_external",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "url",
            "param_type": "&str",
            "is_optional": false,
            "description": "文章URL"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<()>>",
        "description": "在外部浏览器中打开文章。"
      },
      {
        "name": "update_article_by_source",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "article_id",
            "param_type": "i32",
            "is_optional": false,
            "description": "文章ID"
          },
          {
            "name": "source_text",
            "param_type": "String",
            "is_optional": false,
            "description": "新的原始文本内容"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<bool>>",
        "description": "根据原始文本更新文章内容。"
      },
      {
        "name": "chat_with_article_assistant",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "article_id",
            "param_type": "i32",
            "is_optional": false,
            "description": "文章ID"
          },
          {
            "name": "user_prompt",
            "param_type": "&str",
            "is_optional": false,
            "description": "用户输入提示"
          },
          {
            "name": "history",
            "param_type": "Vec<ConversationMessage>",
            "is_optional": false,
            "description": "对话历史"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<String>>",
        "description": "与文章助手进行对话。"
      },
      {
        "name": "search_contents_by_keyword",
        "interface_type": "method",
        "visibility": "pub",
        "parameters": [
          {
            "name": "keyword",
            "param_type": "&str",
            "is_optional": false,
            "description": "搜索关键词"
          },
          {
            "name": "offset",
            "param_type": "u64",
            "is_optional": false,
            "description": "分页偏移量"
          },
          {
            "name": "count",
            "param_type": "u64",
            "is_optional": false,
            "description": "每页数量"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<Vec<Model>>>",
        "description": "根据关键词搜索内容。"
      }
    ],
    "dependencies": [
      {
        "name": "ollama",
        "path": null,
        "is_external": true,
        "line_number": 1,
        "dependency_type": "use",
        "version": null
      },
      {
        "name": "recorder",
        "path": null,
        "is_external": true,
        "line_number": 2,
        "dependency_type": "use",
        "version": null
      },
      {
        "name": "tauri",
        "path": null,
        "is_external": true,
        "line_number": 3,
        "dependency_type": "use",
        "version": null
      },
      {
        "name": "types",
        "path": null,
        "is_external": false,
        "line_number": 4,
        "dependency_type": "use",
        "version": null
      }
    ],
    "complexity_metrics": {
      "cyclomatic_complexity": 1.0,
      "lines_of_code": 136,
      "number_of_functions": 7,
      "number_of_classes": 0,
      "depth_of_inheritance": 0,
      "coupling_factor": 4.0,
      "cohesion_score": 0.95
    }
  },
  "timestamp": 1758805634,
  "prompt_hash": "5602eecf348eaeca4f0eb4632f85cbcb",
  "token_usage": {
    "input_tokens": 1774,
    "output_tokens": 3272,
    "total_tokens": 5046
  },
  "model_name": null
}