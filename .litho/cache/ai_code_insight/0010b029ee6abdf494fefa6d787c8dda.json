{
  "data": {
    "code_dossier": {
      "name": "types.rs",
      "file_path": "crates/scrap/src/types.rs",
      "source_summary": "",
      "code_purpose": "model",
      "importance_score": 0.6,
      "description": "定义抓取器接口 IFetcher，用于异步获取文章列表。依赖于 Tauri 框架和外部类型系统。",
      "functions": [],
      "interfaces": [
        "IFetcher"
      ]
    },
    "detailed_description": "该组件定义了一个名为 IFetcher 的 trait，用于抽象不同数据源的抓取逻辑。其核心方法 fetch 接收应用句柄、LLM 分析段落和 Feed 目标描述，返回一个异步 Future，输出为 Article 对象的 Result 列表。此设计支持在 Tauri 桌面应用上下文中进行灵活扩展，允许不同的实现根据配置从多种来源抓取内容。",
    "responsibilities": [
      "定义抓取操作的统一接口契约",
      "支持异步非阻塞的数据获取模式",
      "集成 Tauri 应用上下文以访问资源",
      "解耦具体抓取逻辑与调用方",
      "传递 LLM 处理指令与目标源描述"
    ],
    "interfaces": [
      {
        "name": "IFetcher",
        "interface_type": "trait",
        "visibility": "public",
        "parameters": [
          {
            "name": "app_handle",
            "param_type": "Option<AppHandle<R>>",
            "is_optional": true,
            "description": "Tauri 应用句柄，用于访问应用状态或资源"
          },
          {
            "name": "llm_section",
            "param_type": "&LLMSection",
            "is_optional": false,
            "description": "指定 LLM 处理的内容区域配置"
          },
          {
            "name": "ftd",
            "param_type": "FeedTargetDescription",
            "is_optional": false,
            "description": "目标 feed 来源的描述信息"
          }
        ],
        "return_type": "impl std::future::Future<Output = anyhow::Result<Vec<Article>>> + Send",
        "description": "抓取器行为的抽象接口，支持运行时动态分发。"
      }
    ],
    "dependencies": [
      {
        "name": "tauri",
        "path": "tauri::{AppHandle, Runtime}",
        "is_external": true,
        "line_number": 1,
        "dependency_type": "use",
        "version": null
      },
      {
        "name": "types",
        "path": "types::{Article, FeedTargetDescription, LLMSection}",
        "is_external": false,
        "line_number": 2,
        "dependency_type": "use",
        "version": null
      }
    ],
    "complexity_metrics": {
      "cyclomatic_complexity": 1.0,
      "lines_of_code": 11,
      "number_of_functions": 1,
      "number_of_classes": 0,
      "depth_of_inheritance": 0,
      "coupling_factor": 0.67,
      "cohesion_score": 0.95
    }
  },
  "timestamp": 1759024623,
  "prompt_hash": "0010b029ee6abdf494fefa6d787c8dda",
  "token_usage": {
    "input_tokens": 498,
    "output_tokens": 703,
    "total_tokens": 1201
  },
  "model_name": null
}