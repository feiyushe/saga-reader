{
  "data": {
    "code_dossier": {
      "name": "lib.rs",
      "file_path": "crates/ollama/src/lib.rs",
      "source_summary": "",
      "code_purpose": "specificfeature",
      "importance_score": 0.8,
      "description": "Ollama 程序状态与版本信息查询组件，支持跨平台检测和远程健康检查",
      "functions": [
        "install",
        "launch",
        "request_running",
        "request_version",
        "query_platform",
        "query_platform_by_remote",
        "query_platform_by_process",
        "parse_version",
        "parse_is_running_from_version",
        "create_shell_command"
      ],
      "interfaces": [
        "ProgramStatus",
        "Information",
        "APIVersionResponse"
      ]
    },
    "detailed_description": "该组件负责管理 Ollama AI 模型运行时的状态检测、安装启动及版本查询。通过本地进程调用和远程 HTTP 接口两种方式判断 Ollama 是否已安装并运行，并获取其版本信息。支持 Windows、macOS 和 Linux 跨平台路径配置，使用条件编译处理不同操作系统的 shell 命令差异。核心逻辑包括：1) 通过执行 `ollama -v` 检查本地安装状态；2) 向 API 端点发送请求验证服务是否运行；3) 解析响应内容提取版本号；4) 综合判断返回结构化信息。",
    "responsibilities": [
      "检测 Ollama 在当前系统中的安装与运行状态",
      "通过本地命令行和远程 API 双重机制获取程序信息",
      "跨平台兼容性处理（Windows/macOS/Linux）",
      "解析命令输出和 API 响应数据",
      "提供统一的信息查询接口供上层模块调用"
    ],
    "interfaces": [
      {
        "name": "ProgramStatus",
        "interface_type": "enum",
        "visibility": "pub",
        "parameters": [],
        "return_type": null,
        "description": "表示 Ollama 程序的三种状态：未安装、已安装但未运行、正在运行"
      },
      {
        "name": "Information",
        "interface_type": "struct",
        "visibility": "pub",
        "parameters": [],
        "return_type": null,
        "description": "封装版本号、状态和额外信息的响应数据结构"
      },
      {
        "name": "APIVersionResponse",
        "interface_type": "struct",
        "visibility": "private",
        "parameters": [],
        "return_type": null,
        "description": "用于反序列化远程 API 返回的版本信息"
      }
    ],
    "dependencies": [
      {
        "name": "serde",
        "path": null,
        "is_external": true,
        "line_number": 1,
        "dependency_type": "serialization",
        "version": null
      },
      {
        "name": "tokio",
        "path": null,
        "is_external": true,
        "line_number": 2,
        "dependency_type": "runtime",
        "version": null
      },
      {
        "name": "types::llm_endpoint::LLMEndPoint",
        "path": "crates/types/src/llm_endpoint.rs",
        "is_external": false,
        "line_number": 3,
        "dependency_type": "internal",
        "version": null
      }
    ],
    "complexity_metrics": {
      "cyclomatic_complexity": 8.0,
      "lines_of_code": 140,
      "number_of_functions": 10,
      "number_of_classes": 3,
      "depth_of_inheritance": 0,
      "coupling_factor": 0.3,
      "cohesion_score": 0.75
    }
  },
  "timestamp": 1759024418,
  "prompt_hash": "80f61996e2d06022b495b4ba4b64b062",
  "token_usage": {
    "input_tokens": 1470,
    "output_tokens": 864,
    "total_tokens": 2334
  },
  "model_name": null
}