{
  "data": {
    "code_dossier": {
      "name": "mod.rs",
      "file_path": "crates/feed_api_rs/src/startup/mod.rs",
      "source_summary": "",
      "code_purpose": "other",
      "importance_score": 0.8,
      "description": "应用启动模块，负责初始化核心组件并构建应用上下文。实现分阶段（Tiger0/1/2）的启动流程控制。",
      "functions": [
        "tiger0_1",
        "tiger2",
        "launch"
      ],
      "interfaces": [
        "Startup",
        "ContextHost"
      ]
    },
    "detailed_description": "该组件是应用程序的启动中枢，采用分阶段策略进行初始化：Tiger0_1同步初始化关键配置和日志系统，随后并行初始化用户配置与LLM服务依赖。通过`tokio::join!`实现并发加载以提升启动效率，并具备错误聚合处理机制。支持延迟初始化（Tiger2预留接口），体现阶段性启动设计思想。实现了`ContextHost` trait以统一管理`ApplicationContext`的生命周期。",
    "responsibilities": [
      "协调应用启动时的核心组件初始化顺序",
      "实现Tiger0/Tiger1阶段的同步与并发初始化逻辑",
      "构建并返回完整的应用上下文(ApplicationContext)",
      "提供结构化的启动日志与错误报告机制",
      "实现ContextHost接口以支持上下文传递"
    ],
    "interfaces": [
      {
        "name": "Startup",
        "interface_type": "struct",
        "visibility": "pub",
        "parameters": [],
        "return_type": null,
        "description": "应用启动器主结构体，持有应用上下文实例"
      },
      {
        "name": "ContextHost",
        "interface_type": "trait",
        "visibility": "pub",
        "parameters": [],
        "return_type": null,
        "description": "上下文宿主接口，定义了上下文获取与克隆的标准方法"
      },
      {
        "name": "launch",
        "interface_type": "function",
        "visibility": "pub",
        "parameters": [],
        "return_type": "anyhow::Result<Startup>",
        "description": "异步启动入口点，执行初始化并返回启动器实例"
      },
      {
        "name": "tiger0_1",
        "interface_type": "function",
        "visibility": "pub",
        "parameters": [],
        "return_type": "anyhow::Result<ApplicationContext>",
        "description": "执行Tiger0/Tiger1阶段的初始化工作，包括配置、日志、用户数据和LLM服务"
      },
      {
        "name": "tiger2",
        "interface_type": "function",
        "visibility": "pub",
        "parameters": [
          {
            "name": "_context",
            "param_type": "ApplicationContext",
            "is_optional": false,
            "description": null
          }
        ],
        "return_type": "anyhow::Result<ApplicationContext>",
        "description": "预留的延迟初始化接口，用于Tiger2阶段的异步任务"
      }
    ],
    "dependencies": [
      {
        "name": "spdlog",
        "path": null,
        "is_external": true,
        "line_number": 1,
        "dependency_type": "logging",
        "version": null
      },
      {
        "name": "crate::application_context",
        "path": "crates/feed_api_rs/src/application_context",
        "is_external": false,
        "line_number": 3,
        "dependency_type": "module",
        "version": null
      },
      {
        "name": "types",
        "path": "./crates/llm/src/providers/types.rs",
        "is_external": false,
        "line_number": 9,
        "dependency_type": "module",
        "version": null
      }
    ],
    "complexity_metrics": {
      "cyclomatic_complexity": 3.0,
      "lines_of_code": 72,
      "number_of_functions": 3,
      "number_of_classes": 1,
      "depth_of_inheritance": 0,
      "coupling_factor": 0.45,
      "cohesion_score": 0.88
    }
  },
  "timestamp": 1759024312,
  "prompt_hash": "a400b5d729bb04c7cd24a67f7eb77cee",
  "token_usage": {
    "input_tokens": 1272,
    "output_tokens": 963,
    "total_tokens": 2235
  },
  "model_name": null
}