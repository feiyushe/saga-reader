{
  "data": {
    "code_dossier": {
      "name": "application_context.rs",
      "file_path": "crates/feed_api_rs/src/application_context.rs",
      "source_summary": "",
      "code_purpose": "entry",
      "importance_score": 0.6,
      "description": "定义应用程序上下文结构及其宿主访问机制，用于在系统各组件间共享配置信息。",
      "functions": [
        "new",
        "get_context",
        "copy_context"
      ],
      "interfaces": [
        "ContextHost"
      ]
    },
    "detailed_description": "该组件定义了 `ApplicationContext` 结构体，用于封装应用运行所需的核心配置（AppConfig 和 UserConfig）。通过 `ContextHost` trait 提供统一的上下文访问契约，允许系统中的其他组件以一致的方式获取和复制上下文实例。`ContextHostWrapper` 是该 trait 的具体实现，包装了一个 `ApplicationContext` 实例并提供安全的访问方法。整体设计支持上下文的不可变共享与克隆，适用于多模块协作场景。",
    "responsibilities": [
      "封装应用程序的全局配置数据",
      "提供对配置上下文的安全只读访问",
      "支持上下文对象的复制与共享",
      "定义上下文宿主的标准接口规范",
      "促进依赖解耦和测试可替代性"
    ],
    "interfaces": [
      {
        "name": "ContextHost",
        "interface_type": "trait",
        "visibility": "public",
        "parameters": [
          {
            "name": "context",
            "param_type": "ApplicationContext",
            "is_optional": false,
            "description": "初始化宿主时传入的应用上下文实例"
          }
        ],
        "return_type": null,
        "description": "定义上下文宿主的行为契约，确保所有宿主实现都能提供对 ApplicationContext 的访问能力。"
      },
      {
        "name": "new",
        "interface_type": "function",
        "visibility": "public",
        "parameters": [
          {
            "name": "context",
            "param_type": "ApplicationContext",
            "is_optional": false,
            "description": "要包装的应用上下文"
          }
        ],
        "return_type": "Self",
        "description": "构造一个新的 ContextHostWrapper 实例"
      },
      {
        "name": "get_context",
        "interface_type": "function",
        "visibility": "public",
        "parameters": [],
        "return_type": "&ApplicationContext",
        "description": "获取对内部 ApplicationContext 的不可变引用"
      },
      {
        "name": "copy_context",
        "interface_type": "function",
        "visibility": "public",
        "parameters": [],
        "return_type": "ApplicationContext",
        "description": "克隆并返回一份 ApplicationContext 的副本"
      }
    ],
    "dependencies": [
      {
        "name": "types",
        "path": "types",
        "is_external": false,
        "line_number": 1,
        "dependency_type": "module",
        "version": null
      }
    ],
    "complexity_metrics": {
      "cyclomatic_complexity": 2.0,
      "lines_of_code": 35,
      "number_of_functions": 3,
      "number_of_classes": 2,
      "depth_of_inheritance": 0,
      "coupling_factor": 0.1,
      "cohesion_score": 0.9
    }
  },
  "timestamp": 1759024585,
  "prompt_hash": "66e11055ecfddc815b84ef74734c929e",
  "token_usage": {
    "input_tokens": 607,
    "output_tokens": 847,
    "total_tokens": 1454
  },
  "model_name": null
}